#!/usr/bin/env python

# Accelerated Piezo Evaluator (APE) returns the piezo-coefficient (d33) starting
# from an XYZ input.
import subprocess 
import sys, math
import numpy as np
from collections import defaultdict
import copy
import matplotlib.pyplot as plt
from subprocess import check_call
from scipy.optimize import curve_fit
from scipy.optimize import minimize
from argparse import ArgumentParser

def getarguments():
    """Gets arguments from the input """ 
    parser = ArgumentParser(prog="Accelerated Piezo Evaluator (APE)", description="Returns piezo-coefficient (D33) using an XYZ file input.")
    parser.add_argument("xyzfile", help="Name of the XYZ file to be used. Example.xyz")
    parser.add_argument("qchem_input", help="Name of the qchem input file to be used to carry out the calculations.")
    parser.add_argument("-n","--nstep", default=20, help="Number of shifts used in calculations. Total number of shifts is nstep*2+1. Default = 15", type=int)
    parser.add_argument("-z","--zshift", default=0.05, help="How large the shifts are in atomic units. Default = 0.05", type=float)
    parser.add_argument("-r","--restart", help="Reruns APE without doing full qchem calculations using existing qchem output files.",  action="store_true")
    parser.add_argument("-d","--debug", help="Runs debug mode that gives more information about intermediary calculations in stdout.", action="store_true")
    parser.add_argument("--ppn", default=1, help="Number of cores to use for calculations", type=int)
    opts=parser.parse_args()
    return opts
input = getarguments() 
fxyz = input.xyzfile
fqchem = input.qchem_input
nstep = input.nstep
zshift = input.zshift
restart = input.restart 
debug = input.debug
ppn = input.ppn

#### List of XYZ coords plus Atom Symbol & Qchem input list
XYZ = [] 
qchemtemplate = []

### Qchem File
f = open(fqchem, "r")
qchemtemplate = f.readlines()
f.close()

### XYZ File
f = open(fxyz, "r")
Natom = int(f.readline())
print "Natom = ", Natom
Comment = f.readline()
for line in f:
    tmp = line.split()
    XYZ.append(tmp[0]) # atom symbol
    XYZ.append(float(tmp[1])) # x
    XYZ.append(float(tmp[2])) # y
    XYZ.append(float(tmp[3])) # z
f.close()

### Reordering XYZ file based on adjacency 
def qchemsort(XYZ):
    """Generates a Qchem input file for reordering the XYZ list """
    f = open("qchemsortXYZ", "w")
    f.write("$molecule \n")
    f.write("0 1 \n")
    for i in range(Natom):
        f.write("%s  %.6f  %.6f %.6f \n" % (XYZ[4*i], XYZ[4*i+1], XYZ[4*i+2], XYZ[4*i+3]))
    f.write("$end \n")
    f.write("$rem \n")
    f.write("jobtype sp \n")
    f.write("exchange hf \n")
    f.write("basis sto-3g \n")
    f.write("skip_scfman 1 \n")
    f.write("bcsr_geometry_reorder 1 \n")
    f.write("$end \n")
    f.close()

def runqchemsort():
    """Runs qchem on XYZ file to sort by adjacency """
    qchem = "runqchem.sh"
    input = "qchemsortXYZ"
    output = "qchemsortXYZ.out"
    args = str(ppn) + "   " + input + "   " + output   
    print qchem, args
    check_call([qchem,args])

def getsortedXYZ():
    """Gets the sorted XYZ list from the qchem output file """
    XYZsort = []
    f = open("qchemsortXYZ.out", "r")
    for i, line in enumerate(f):
        if "Standard Nuclear Orientation (Angstroms)" in line:
            line = f.next()
            line = f.next()
            line = f.next()
            for i in range(Natom):
                tmp = line.split()
                XYZsort.append(tmp[1])
                XYZsort.append(float(tmp[2]))
                XYZsort.append(float(tmp[3]))
                XYZsort.append(float(tmp[4]))
                line = f.next()
    f.close()
    return XYZsort

### Running qchem sort
qchemsort(XYZ)
print "Calling Q-Chem ..."
runqchemsort()
XYZ = getsortedXYZ()

if debug:
    print "Qchem sorted XYZ list:"
    print XYZ

### Identifying Hydrogen-bonded Atom pair
### H bond radius constraints
r_min = 1.3
r_max = 2.5
### Initialising 
idx1 = -1
idx2 = -1
hvec = np.array([0,0,0], 'd') # H bond vector/axis 
bmat = np.zeros(shape=(Natom,Natom)) # Bond matrix 
covmat = np.zeros(shape=(Natom,Natom),dtype = np.int) #Covalent
### Covalent bond tolerance 
mintol = .5    
maxtol = 1.2
### Covalent radii of atoms
rcovtable = {"H": 0.37, "C": 0.77, "N": 0.75, "O": 0.73, "F":0.71, "P":1.06, "S":1.02, "Cl":0.99, "Se":1.16, "Br":1.14}

### Finding Bond matrix
for i in range(Natom):
    sym1 = XYZ[4*i]
    ri = rcovtable[sym1]	
    x1 = XYZ[4*i+1]
    y1 = XYZ[4*i+2]
    z1 = XYZ[4*i+3]
    for j in range(Natom):
        sym2 = XYZ[4*j]
	rj = rcovtable[sym2]
        x2 = XYZ[4*j+1]
        y2 = XYZ[4*j+2]
        z2 = XYZ[4*j+3]
        r2 = (x1-x2)**2 + (y1-y2)**2 + (z1-z2)**2
        r = math.sqrt(r2)
	bmat[(i,j)] = r
	rcov = ri + rj
	if (r >= mintol * rcov and r <= maxtol * rcov) or i == j: 
		covmat[(i,j)] = 1

### Printing bondmatrix, covmat
print "Bond matrix:"
print covmat

### Making an empty dictionary
def initializeML():
    """Making an empty dictionary """
    return dict([(x, 0) for x in range(Natom)])

### Monomer List building functions
def boundto(i):
    """Finds bonded atoms"""
    boundtolist = []
    for k in range(Natom):
        if covmat[i,k] == 1:
	    boundtolist.append(k)
    return boundtolist

def addatom(i, in_monomer):
	"""Adds atoms to dictionary based on which monomer they're in"""
	if in_monomer[i] == 1:
		return
	in_monomer[i] = 1
	for j in boundto(i):
		addatom(j, in_monomer)

### Defining ML, monomer list
ML = []
for i in range(Natom):
	tmp = initializeML()
	addatom(i, tmp)
	
	if not tmp in ML:
		ML.append(tmp)

### Number of atoms in each monomer
Natom_mon1 = sum(ML[0].values())
Natom_mon2 = sum(ML[1].values())

if debug:
    print "Number of atoms in monomer 1:", Natom_mon1 
    print "Number of aroms in monomer 2:", Natom_mon2
   
### Exit conditions for not having 2 monomers   
if len(ML) > 2:
    print "Expected 2 monomers, found", len(ML)
    sys.exit(1)

### Finding h bond pair (correct)
def findHbondpair():
    """ Finding the Hydrogen bond pair"""
    r_min = 10**12
    idx1 = -1
    idx2 = -1
    for i in range(Natom_mon1):
        xi = XYZ[(4*i)+1]
        yi = XYZ[(4*i)+2]
        zi = XYZ[(4*i)+3]
        for j in range(Natom_mon2):
            xj = XYZ[(4*(j+Natom_mon1))+1]
            yj = XYZ[(4*(j+Natom_mon1))+2]
            zj = XYZ[(4*(j+Natom_mon1))+3]
            r = math.sqrt((xi - xj)**2 + (yi - yj)**2 + (zi -zj)**2)
            if r < r_min:
                idx1 = i
                idx2 = j + Natom_mon1
                r_min = r
                hvec[0] = xi - xj
       	       	hvec[1]	= yi - yj
       	       	hvec[2]	= zi - zj
    return (idx1, idx2, hvec)

idx1, idx2, hvec = findHbondpair()

### Exit conditions for no Hydrogen bonds
if idx1 < 0 or idx2 < 0:
    print "No hydrogen bonds found!"
    sys.exit(1)

### Hydrogen bond information output

print "Hydrogen-bonded pair: ", idx1, idx2
print "H-bond axis:"
print hvec

#### Rotating the system to align z axis with the H bond axis 

### Put origin at midpoint of hydrogen bond

mid_x = .5 * (XYZ[(idx1*4)+1] + XYZ[(idx2*4)+1])
mid_y = .5 * (XYZ[(idx1*4)+2] + XYZ[(idx2*4)+2])
mid_z = .5 * (XYZ[(idx1*4)+3] + XYZ[(idx2*4)+3])
XYZ_origin_hbond_midpoint = []
for i in range(Natom):
    XYZ_origin_hbond_midpoint.append(XYZ[i*4])
    XYZ_origin_hbond_midpoint.append((XYZ[(i*4)+1]) - mid_x)
    XYZ_origin_hbond_midpoint.append((XYZ[(i*4)+2]) - mid_y)
    XYZ_origin_hbond_midpoint.append((XYZ[(i*4)+3]) - mid_z)

### Finding rotation Matrix 

def rotationTranslation(xyzArray, index1, index2):
	"""
	    a function for rotating and translating a molecule so that a given line
	    segment between two atoms lies on the z axix.  Ty Keith!
        """
	zVec = np.array([0, 0, 1.0])
	yVec = np.array([0, 1.0, 0])
	transVec = xyzArray[index1]
	xyzArray = xyzArray - transVec
	vec = xyzArray[index2]
	vecXy = np.array([vec[0],vec[1], 0.0])
	vecYz = np.array([0.0 ,np.linalg.norm(vecXy), vec[2]])

	if np.linalg.norm(vecXy)==0.0:
	    return xyzArray

	vecYzNorm = vecYz * 1.0/(np.linalg.norm(vecYz))
	vecXyNorm = vecXy* 1.0/(np.linalg.norm(vecXy))

	theta1 = np.arccos(np.dot(vecXyNorm, yVec))
	theta2 = np.arccos(np.dot(vecYzNorm, zVec))

	cross1 = np.cross(vecXyNorm, yVec)
	cross2 = np.cross(vecYzNorm, zVec)
	if cross1[2] < 0:
		theta1 = 2*np.pi -theta1
	if cross2[0] < 0:
		theta2 = 2 *np.pi -theta2

	rotationMatrix =np.array([[np.cos(theta1), -np.sin(theta1), 0.0],
	[np.cos(theta2)*np.sin(theta1), np.cos(theta2)* np.cos(theta1), -np.sin(theta2)],
	[np.sin(theta2)*np.sin(theta1), np.sin(theta2)* np.cos(theta1), np.cos(theta2)]])
	for i in range(xyzArray.shape[0]):
		vecCurrent = xyzArray[i]
		vecNew = np.reshape(np.dot(rotationMatrix, np.reshape(vecCurrent, [3,1])), [3])
		xyzArray[i] = vecNew
	
	return xyzArray

### Transfer XYZ_origin_hbond_midpoint list into array
XYZarray = np.empty([Natom, 3])
for i in range(Natom):
    XYZarray[i] = np.array([XYZ_origin_hbond_midpoint[(i*4)+1], XYZ_origin_hbond_midpoint[(i*4)+2], XYZ_origin_hbond_midpoint[(i*4)+3]])

### Setting XYZrotation to otput of rotation function
XYZrotation = rotationTranslation(XYZarray, idx1, idx2)

### Creating XYZ file from rotated XYZ coordinates
f = open("XYZrotation.xyz", "w")
f.write("%d \n" % (Natom))
f.write("Comment \n")
for i in range(Natom):
    f.write("%s  %.6f  %.6f %.6f \n" % (XYZ[4*i], XYZrotation[(i,0)], XYZrotation[(i,1)], XYZrotation[(i,2)]))
f.close()

### Taking aligned array and putting back into XYZ list
XYZalign = []
for i in range(Natom):
    XYZalign.append(XYZ[i*4])
    for n in range(3):
        XYZalign.append(XYZrotation[i,n])

### Setting aligned list to XYZ for future operations
XYZ = XYZalign

### XYZ coord for Monomer 1 in list XYZmon1
XYZmon1 = []
for n in range(Natom):
   if (ML[0][n] == 1):
	XYZmon1.append(XYZ[4*n+1])
	XYZmon1.append(XYZ[4*n+2])
	XYZmon1.append(XYZ[4*n+3])

### XYZ coord for Monomer 2 in list XYZmon2
XYZmon2 = []
for n in range(Natom):
    if (ML[1][n] == 1):
	XYZmon2.append(XYZ[4*n+1])
	XYZmon2.append(XYZ[4*n+2])
	XYZmon2.append(XYZ[4*n+3])

### Shifting Monomer 2
def mon2shift(zshift):
    """Shifting z coord for monomer 2 by zshift"""
    XYZmon2shift = copy.deepcopy(XYZmon2)
    for n in range(2, len(XYZmon2), 3):
        XYZmon2shift[n] += zshift 
    return XYZmon2shift

def mon2stepshift(nstep,zshift):
    """Shifting z coord for monomer nstep times by zshift"""
    mon2shifted = []
    for i in range(-nstep,nstep+1):
        mon2shifted.append(mon2shift(zshift * i))
    return mon2shifted

### Output to file functions 
def XYZfile(nstep,zshift):
    """Genrated an XYZ file based on nstep and zshift """
    mon2test = mon2stepshift(nstep,zshift)
    f = open("xyztemp.xyz", "w")
    for k in range((nstep*2)+1):
        f.write("%d \n" % (Natom))
        f.write("Comment \n")
        print Natom
        print "Comment"
        for i in range(Natom_mon1):
            f.write("%s  %.6f  %.6f %.6f \n" % (XYZ[4*i], XYZmon1[3*i], XYZmon1[3*i+1], XYZmon1[3*i+2]))
            print XYZmon1[3*i], XYZmon1[3*i+1], XYZmon1[3*i+2]
        for n in range(Natom_mon2):
            f.write("%s  %.6f  %.6f  %.6f \n" % (XYZ[(Natom_mon1 + n)*4], mon2test[k][3*n], mon2test[k][3*n+1], mon2test[k][3*n+2]))
            print mon2test[k][3*n], mon2test[k][3*n+1], mon2test[k][3*n+2]
    f.close()
### Useful if you need XYZ files
#if debug:
#    print "XYZ file outputs from nstep and zshift:"
#    print XYZfile(nstep,zshift)

def qcheminput(nstep,zshift,qchemtemplate,bondlength):
    """Generates a Qchem input file based on nstep, zshift and a qchem template """
    mon2test = mon2stepshift(nstep,zshift)
    for k in range((nstep*2)+1):
        f = open("qcheminput" + str(k), "w")
        comment = "!BondLength = " + str(bondlength[k]) +" \n"
        f.write(comment)
        f.write("$molecule \n")
        f.write("0 1 \n")
        for i in range(Natom_mon1):
            f.write("%s  %.6f  %.6f %.6f \n" % (XYZ[4*i], XYZmon1[3*i], XYZmon1[3*i+1], XYZmon1[3*i+2]))
        for n in range(Natom_mon2):
            f.write("%s  %.6f  %.6f  %.6f \n" % (XYZ[(Natom_mon1 + n)*4], mon2test[k][3*n], mon2test[k][3*n+1], mon2test[k][3*n+2]))
        f.write("$end \n")
        for n in range(len(qchemtemplate)):
            f.write("%s" % qchemtemplate[n])
        f.close()

def isconverged(filename):
    """Checks if previous qchem calculations have been done and skips them if so """
    try:
        f=open(filename,"r")
        for line in f:
            if "Convergence criterion met" in line:
                return True
    except:
        pass
    return False

def runqchem(nstep,ppn):
    """Runs qchem on generated qcheminput files """
    for k in range((nstep*2)+1):
        qchem = "runqchem.sh" 
        input = "qcheminput" + str(k)  
        output = "qchem" + str(k) + ".out"
        args = str(ppn) + " " + input + " " + output  
        print qchem, args 
        if not isconverged(output):
            check_call([qchem,args])   
        else: 
            print "Skipping step k!"

#def rerunqcheminput(k,nstep,zshift,qchemtemplate):
#    """Generates a Qchem input file to accomidate recentering of data """
#    mon2test = mon2stepshift(nstep,zshift)
#    for j in range(k,(nstep*2)+4):
#        f = open("qcheminput" + str(j), "w")
#
#        f.write("$molecule \n")
#        f.write("0 1 \n")
#        for i in range(Natom_mon1):
#            f.write("%s  %.6f  %.6f %.6f \n" % (XYZ[4*i], XYZmon1[3*i], XYZmon1[3*i+1], XYZmon1[3*i+2]))
#        for n in range(Natom_mon2):
#            f.write("%s  %.6f  %.6f  %.6f \n" % (XYZ[(Natom_mon1 + n)*4], mon2test[k][3*n], mon2test[k][3*n+1], mon2test[k][3*n+2]))
#        f.write("$end \n")
#        for n in range(len(qchemtemplate)):
 #           f.write("%s" % qchemtemplate[n])
 #       f.close()

#def rerunqchem(k,nstep,ppn):
#    """Runs qchem again to accomidate recentering of data """
#    for n in range(k,(nstep*2)+4):
#        qchem = "runqchem.sh"
#        input = "qcheminput" + str(n)
#        output = "qchem" + str(n) + ".out"
#        args = str(ppn) + " " + input + " " + output
#        print qchem, args
#        if not isconverged(output):
#            check_call([qchem,args])
#        else:
 #           print "Did not rerun qchem for index", n



def getenergy(nstep):
    """Gets the total energy from the qchem output file """
    energy = []
    for k in range((nstep*2)+1):
        f = open("qchem" + str(k) + ".out", "r")
        converged = False
        for i, line in enumerate(f):
            if "Total energy in the final basis set =" in line:
                converged = True
                tmp = line.split()
                energy.append(float(tmp[-1]))
        if not converged:
            print "Qchem didn't work for step ", k
        f.close()
    return energy   


def runsingleqchem(newR,idx,nstep,zshift,qchemtemplate,ppn):
    """Runs qchem for a single bondlength value and returns the energy for that value  """


    newnstep = ((nstep*2)+1)+idx
    mon2test = mon2stepshift(newnstep,zshift)
    f = open("qcheminput" + str(newnstep), "w")
    comment = "!BondLength = "+str(newR)+" \n"
    f.write(comment)
    f.write("$molecule \n")
    f.write("0 1 \n")
    for k in range(newnstep,newnstep):
        for i in range(Natom_mon1):
             f.write("%s  %.6f  %.6f %.6f \n" % (XYZ[4*i], XYZmon1[3*i], XYZmon1[3*i+1], XYZmon1[3*i+2]))
        for n in range(Natom_mon2):
             f.write("%s  %.6f  %.6f  %.6f \n" % (XYZ[(Natom_mon1 + n)*4], mon2test[k][3*n], mon2test[k][3*n+1], mon2test[k][3*n+2]))
        f.write("$end \n")
        for n in range(len(qchemtemplate)):
            f.write("%s" % qchemtemplate[n])
    f.close()

    qchem = "runqchem.sh" 
    input = "qcheminput" + str(newnstep)  
    output = "qchem" + str(newnstep) + ".out"
    args = str(ppn) + " " + input + " " + output  
    check_call([qchem,args])   

    newenergy = []
    f = open("qchem" + str(newnstep) + ".out", "r")
    for i, line in enumerate(f):
        if "Total energy in the final basis set =" in line:
            tmp = line.split()
            newenergy.append(float(tmp[-1]))
    f.close()
    return newenergy

 






#def rerungetenergy(k,nstep):
#    """Gets the total energy from the qchem output file """
#    energy = []
#    for n in range(k,(nstep*2)+1):
 #       f = open("qchem" + str(n) + ".out", "r")
 #       converged = False
#        for i, line in enumerate(f):
#            if "Total energy in the final basis set =" in line:
#                converged = True
#                tmp = line.split()
 #               energy.append(float(tmp[-1]))
 #       if not converged:
 #           print "Qchem didn't work for step ", n
	    #       fgclose()
  #  return energy


### Get bond distances

def hbondlength(nstep, zshift):
    """Gets distance between origin and monomer 2's hbonded atom"""
    r = []
    mon2 = mon2stepshift(nstep,zshift)
    for k in range((nstep*2)+1):
        r.append(abs(mon2[k][((idx2-Natom_mon1)*3)+2]))    
    return r



bondlength = []
bondlength = hbondlength(nstep,zshift)

### Functions in use for qchem
if not restart:
    qcheminput(nstep,zshift,qchemtemplate,bondlength)
    runqchem(nstep,ppn)
energy = []
energy = getenergy(nstep)



#def rerunhbondlength(k,nstep, zshift):
#    """Gets distance between origin and monomer 2's hbonded atom"""
#    r = []
#    mon2 = mon2stepshift(nstep,zshift)
#    for n in range(k,(nstep*2)+1):
#        r.append(abs(mon2[n][((idx2-Natom_mon1)*3)+2]))
#    return r

if debug:
    print "Hydrogen bond lengths:"
    print hbondlength(nstep,zshift)
    print "Energy values from qchem"
    print energy

if len(bondlength) != len(energy):
    print "Bond length and energy lists not the same length!"
    print "Bond length:", len(bondlength), "Energy:", len(energy)
    sys.exit(1)

### plot bond length vs. energy
plt.plot(bondlength,energy,)
plt.ylabel("Energy")
plt.xlabel("Bond Length")
plt.show()

### Calc d33 

def getlowestenergy(energy):
    """Gets the smallest energy value from energy list """
    for n in range(len(energy)):
        if energy[n] < n:
            n == energy[n]
    return energy[n] 

Req = getlowestenergy(energy)
if debug:
    print "Lowest energy value:", Req

def Reqguess(energy,bondlength):
    """Gets the smallest Req value to use for minimization """
    eng = 1e12
    index = 0
    for n in range(len(energy)):
        if energy[n] < eng:
            eng = energy[n]
            index = n 
    return energy[index], bondlength[index], index

loweng, Reqguess, Minidx = Reqguess(energy,bondlength)

if debug:
    print "Lowest energy & Req Guess:", loweng, Reqguess

def getdipolemoment(nstep):
    """Gets the dipole moment from the qchem output file """
    mu = []
    for k in range((nstep*2)+1):
        f = open("qchem" + str(k) + ".out", "r")
        converged = False
        for i, line in enumerate(f):
            if "Dipole Moment (Debye)" in line:
                converged = True
                line = f.next()
                tmp = line.split()
                mu.append(float(tmp[-1]))
        if not converged:
            print "Qchem didn't work for step ", k
        f.close()
    return mu

#def rerungetdipolemoment(k,nstep):
#    """Gets the dipole moment from the rerun qchem output file """
#    mu = []
#    for n in range(k,(nstep*2)+1):
#        f = open("qchem" + str(n) + ".out", "r")
#       converged = False
#       for i, line in enumerate(f):
#           if "Dipole Moment (Debye)" in line:
#                converged = True
#                line = f.next()
#                tmp = line.split()
#                mu.append(float(tmp[-1]))
#        if not converged:
#            print "Qchem didn't work for step ", n
#        tep)
#.close()
#    return mu

mu = getdipolemoment(nstep)

if debug:
    print "Dipole moment list:"
    print mu

def enough_points(Minidx,bondlength,energy,mu,nstep,zshift,qchemtemplate,ppn):
    """Finds out of there are enough points to do a good curve fit of the data"""
    Minbondlength = []
    Minenergy = []
    Minmu = []
    for k in reversed(range(3,-4,-1)):
        try:
            Minbondlength.append(bondlength[Minidx+k])
            Minenergy.append(energy[Minidx+k])
            Minmu.append(mu[Minidx+k])
        except Exception:
            return False 
    return True

enough_points = enough_points(Minidx,bondlength,energy,mu,nstep,zshift,qchemtemplate,ppn)
print "Enough points?", enough_points 

newenergy = -1
while not enough_points:
    idx = 0
    if breakpoint < 0:
        idx += 1 
        newR = bondlength[0] - zshift
        newenergy = runsingleqchem(newR,idx,nstep,zshift,qchemtemplate,ppn)
        print "New energy?", newenergy
 
    else:
        idx += 1 
        newR = bondlength[-1] + zshift 
        newenergy = runsingleqchem(newR,idx,nstep,zshift,qchemtemplate,ppn)
        print "New energy 2?", newenergy

print "New energy 3?", newenergy


### plot bond length vs. energy
plt.plot(bondlength,energy,)
plt.ylabel("Energy")
plt.xlabel("Bond Length")
plt.show()


### Mu prime calc

def muPrime(Req, bondlength, mu):
    """gets coefficients for mu """
    mucoef = []
    mucoef = np.polyfit(bondlength, mu, 1)
    print mucoef
    return muPrimeFunc(Req,mucoef)
     
def muFunc(r,coefflist):
    """mu function """
    value = 0.0
    for i in range(len(coefflist)):
	value += coefflist[i]* r**(len(coefflist)-i-1)
        print "muFunc Value:", value
    return value

def muPrimeFunc(r, coefflist):
    """ mu prime function """
    value = 0.0
    for i in range(1,len(coefflist)):
        value += coefflist[i]*r**(len(coefflist)-i-2)
#        print "muPrimeFunc Value:", value
    return value

### E double prime

def generalpoly6(x, a, b, c, d, e, f, g):
    """ General polynomial of degree 6 """ 
    return a*x**6 + b*x**5 + c*x**4 + d*x**3 + e*x**2 + fx + g



def energydoubleprime(x, generalpoly6, bondlength, energy):
    """Returns coefficients of the second der of the energy equation """
    energyarray = np.array(energy)
    bondlengtharray = np.array(bondlength)
#    if debug:
#        print "Energy double prime input arrays" 
#        print "Energy array:"
#        print energyarray
#        print "Bond length array:"
#        print bondlengtharray
### Degree 6 currently 
    engcoeff = np.polyfit(bondlengtharray, energyarray, 6)
###    engcoeff, engcov = curve_fit(generalpoly6, bondlengtharray, energyarray)
    engcoeffdouble = []
    for i in range(len(engcoeff) - 2):
        engcoeffdouble.append(engcoeff[i]*(len(engcoeff)-1-i)*(len(engcoeff)-2-i)) 
    return engcoeff, engcoeffdouble 


####NOT USED
#def minimizepoly(func):
#    """Minimizes a function """
#    minimizedfunc = minimize(func, 1,(engcoeffdouble[0], engcoeffdouble[1], engcoeffdouble[2], engcoeffdouble[3], engcoeffdouble[4]))
#    return minimizedfunc


def find_minimum_newton(fit_function, x0=2.1):
    """
    Find the minimum of a function via a newton like method
    fit_function: the function
    x0: initial guess (should be pretty close)
    returns:
    xmin: the minimum x-value
    ymin: the minimum y-value
    """
    derivfit = np.polyder(fit_function, m = 1)
    derivfit2 = np.polyder(fit_function, m=2)
    xCurrent = x0
    for i in range(100):
        yCurrent = derivfit(xCurrent) #function value
        mCurrent = derivfit2(xCurrent) #slope value
        xCurrent = xCurrent - yCurrent/mCurrent
    xmin = xCurrent
    ymin = fit_function(xCurrent)
    if derivfit(xCurrent) > 1e-11:
        print 'did not successfully find minimum'
    return xmin, ymin


def generalpoly4(x, a, b, c, d, e):
    """General polynomial of degree 4 """
    return a*x**4 + b*x**3 + c*x**2 + d*x + e     
def generalpoly2(x, a, b, c):
    """General polynomial of degree 2 """
    return a*x**2 + b*x + c

engcoeff, engcoeffdouble = energydoubleprime(Req, generalpoly6, bondlength, energy)

if debug:
    print "Curve fit results" 
    print "Energy coefficient:", engcoeff
    print "Energy coefficient double prime:", engcoeffdouble
### Using Deg 2

#Result = minimize(generalpoly6,Reqguess,(engcoeff[0], engcoeff[1], engcoeff[2], engcoeff[3], engcoeff[4],engcoeff[5], engcoeff[6]), tol=1e-12)
#Result = minimize(generalpoly2,Reqguess,(engcoeff[0], engcoeff[1], engcoeff[2]), tol=1e-12)
#Req = Result["x"][0]
### Keith's thingy

fit_coeff = np.polyfit(bondlength, energy, 6)
fit_func = np.poly1d(fit_coeff)
Req, ymin = find_minimum_newton(fit_func)
dervfit = np.polyder(fit_func, m = 2)
curvature = dervfit(Req)
print "dervfit:", dervfit 
print "curvature:", curvature

fit_coeff_mu = np.polyfit(bondlength, mu, 6)
fit_func_mu = np.poly1d(fit_coeff_mu)
Mudervfit = np.polyder(fit_func_mu)
print "Mu Derv fit:", Mudervfit(Req)
muprime = Mudervfit(Req)

if debug:
    print "Minimize output:"
#    print  Result
    print "Req:", Req
### Using Deg 6 
Edoubleprime =  generalpoly4(Req, engcoeffdouble[0], engcoeffdouble[1], engcoeffdouble[2], engcoeffdouble[3], engcoeffdouble[4])
#Edoubleprime = 2*engcoeffdouble[0]
if debug:
    print "E double prime:", Edoubleprime 
 
#muprime = muPrime(Req, bondlength, mu) 
if debug:
    print "Mu:", mu
    print "Mu prime:", muprime

d33 = (- 1 / Req ) * ( 1 / Edoubleprime) * muprime 
if debug:
    print "D33 no conversion:", d33
print "D33 (pC / N):", d33 * (3.33564e-30/4.35974434e-18) / 1.0e-12
if debug:
    print "Conversion factor, no pico:", (3.33564e-30/4.35974434e-18)


