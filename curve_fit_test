#!/usr/bin/env python 

import numpy as np
from scipy.optimize import curve_fit 

def func(x, a, b):
    return a * ((b/x)**6 + 2*(b/x)**2) 


def len_jones_exp(x,a,b,n,m):
    """Varying Lennard-Jones potential """

    return a * ((b/x)**n + 2*(b/x)**m) 

def len_jones(x,a,b):
    """Varying Lennard-Jones potential """
    return a * ((b/x)**n + 2*(b/x)**m)
 
  
xdata = np.array([1,2,3,4,5,6,7,8,9])
ydata = np.array([10,20,30,40,50,60,70,80,90])

class Data(object):
    """A class for storing results from varying Lennard-Jones exponentials"""
    n = 0
    m = 0
    error = np.empty([2,2])
        
def make_data(n,m,error):
    data = Data()
    data.n = n
    data.m = m
    data.error = error
    return data

def exploop():
    """Tries different exponent combinations for Lennard-Jones""" 
    for n in range(2,9,2):
        for m in range (6,13,2):
            print "(", m,",", n, ")"  
            n = n 
            m = m
            def len_jones_tmp(x,a,b):
                  return a * ((b/x)**n + 2*(b/x)**m)
            LJcoeff, LJerr = curve_fit(len_jones_tmp, xdata,ydata)
            make_data(n,m,LJerr) 


if __name__ == "__main__":
        
    exploop()
    print Data()



#popt, pcov = curve_fit(func,xdata,ydata)
#print "popt:", popt 
#print "pcov:", pcov

